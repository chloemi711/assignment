import unittest#import unittestimport random#import randomimport itertools#import itertools# Given a string (e.g. "What the hell?"), returns a list of the following pattern# ['What the hell?', 'What the hell', 'What the hel', 'What the he', 'What the h', 'What the ',#  'What the', 'What th', 'What t', 'What ', 'What', 'Wha', 'Wh', 'W']def input_nput_put_ut_t(input_str: str) -> list:	ret_list = []		new_str = input_str	while(len(new_str)>0):		ret_list.append(new_str)		new_str = new_str[0:len(new_str)-1]		return ret_list	#raise NotImplementedError()#--------------description-----------------#[1] when we input the string, I employ the while loop to delete the last letter#after each turn# add two vectorsdef vector_addition(v1: list, v2: list) -> list:        ret_v = []        for i in range(len(v1)):               x = v1[i] + v2[i]               y.append(x)        return y        #raise NotImplementedError()#-------------description------------------#[2]when we input those two string, I employ the for loop to add each place#of two list circulately# given two lists of integers, find a slice in list 1 and a slice in list 2 whose sums are equal# using enumeration is finedef find_equal_sum_slice(list1: list, list2: list) -> [int, int, int, int]:        ret_list = []        for i in range(len(list1)):                for j in range(len(list1)):                        a = list1[i:j]                        for k in range(len(list2)):                                for s in range(len(list2)):                                        b = list2[k:s]                                        if a != 0 and b !=0 and sum(a) == sum(b):                                                return i,j-1,k,s-1                                        #raise NotImplementedError()#-------------description------------------#[3]using four for loops, I allocate two for list1 and two for list2. Those two#loops for each list are for the starting and the ending. By circulating the parts#of two lists over an dover again through the for loops.                                        # use a sorting algorithm (your choice) to sort a list of ten unsorted integers. Do not use the python  # sort function.def basic_sort(int_list: list) -> list:        ret_list1 = []        for i in range(len(list)):                o = min(list)                ret_list1.append(o)                list = list.remove(o)        return ret_list1,o                        #raise NotImplementedError()#-------------description-----------------#[4]using for loop, I first find the minimum of the whole list and then delete#that minimum. After that, I search the rest of the list again and find the minimum#and then repeat it over and over again, until there is no more number in the list.# A well-known NP-complete problem# Given a set of integers, find a non-empty subset (if exists) summing to a given number k# Note: make use of itertools.combinations. See python documentation onlinedef subset_sum(s: set or list or tuple, k: int) -> set or list or tuple:	    #raise NotImplementedError()class UnitTest(unittest.TestCase):    def test_input(self):        self.assertEqual(input_nput_put_ut_t("What the hell?"),                         ['What the hell?', 'What the hell', 'What the hel', 'What the he', 'What the h', 'What the ',                          'What the', 'What th', 'What t', 'What ', 'What', 'Wha', 'Wh', 'W']                         )    def test_eq_sum_slice(self):        for i in range(10):            list1 = [random.randint(0, 150) for i in range(150)]            list2 = [random.randint(0, 60) for i in range(75)]            a, b, c, d = find_equal_sum_slice(list1, list2)            s1, s2 = sum(list1[a:b + 1]), sum(list2[c:d + 1])            self.assertEqual(s1, s2)    def test_add_vectors(self):        self.assertEqual(vector_addition([1, 2, 3], [4, 5, 6]), [5, 7, 9])        self.assertEqual(vector_addition([1], [-1]), [0])    def test_basic_sort(self):        self.assertEqual([1,3,5,7,9,11,13,15,17,10000], basic_sort([3,1,5,7,9,11,15,17,10000,13]))    	    def test_subset_sum(self):        s = {random.randint(-200, 200) for i in range(random.randint(1,100))}		        k = random.randint(-50, 50)        subset = subset_sum(s, k)        self.assertTrue(set(subset).issubset(s))        self.assertEqual(sum(subset), k)if __name__ == "__main__":    unittest.main()    #unittest is an object    #the unittest object has a 'main' function that is predefined in Python    #the 'main' function of unittest called all(test) functions in the unittest class